[{"name":"linter","main":"./lib/index.js","author":"steelbrain","readme":"Linter\n======\n\n[![Slack Badge](https://img.shields.io/badge/chat-atom.io%20slack-blue.svg?style=flat-square)](http://atom-slack.herokuapp.com/)\n[![Build Status](https://img.shields.io/circleci/project/steelbrain/linter.svg?style=flat-square)](https://circleci.com/gh/steelbrain/linter)\n[![Plugin installs!](https://img.shields.io/apm/dm/linter.svg?style=flat-square)](https://atom.io/packages/linter)\n[![Package version!](https://img.shields.io/apm/v/linter.svg?style=flat-square)](https://atom.io/packages/linter)\n[![Dependencies!](https://img.shields.io/david/steelbrain/Linter.svg?style=flat-square)](https://david-dm.org/steelbrain/linter)\n[![OpenCollective](https://opencollective.com/linter/backers/badge.svg)](#backers)\n[![OpenCollective](https://opencollective.com/linter/sponsors/badge.svg)](#sponsors)\n\n\nLinter is a base linter provider for the hackable [Atom Editor](http://atom.io). Additionally, you need to install a specific linter for your language. You will find a full list on [atomlinter.github.io](http://atomlinter.github.io/).\n\nIt provides a top-level API to its consumer so that they can visualize errors and other types of messages with ease.\n\n\n![Preview](https://cloud.githubusercontent.com/assets/4278113/23879933/1ab17e2a-0872-11e7-803d-3fe0ccfc6790.gif)\n\n#### How to / Installation\n\nYou can install through the CLI by doing:\n\n```\n$ apm install linter\n```\n\nOr you can install from Settings view by searching for `Base Linter`, (this package might not show up when searching for `Linter`).\n\n#### API Documentation\n\nPlease navigate to [steelbrain.me/linter](http://steelbrain.me/linter/) for Linter v2 documentation.\n\n#### Contribute\n\nStick to imposed codestyle:\n\n* `$ npm i`\n* `$ npm lint`\n* `$ npm test`\n","version":"2.3.1","description":"A Base Linter with Cow Powers","repository":"https://github.com/steelbrain/linter","license":"MIT","keywords":["linter","base linter"],"private":true,"scripts":{"test":"apm test","lint":"(flow check) && (eslint . ) && (prettier --list-different lib/*.js)"},"engines":{"atom":">=1.14.0 <2.0.0"},"consumedServices":{"linter":{"versions":{"2.0.0":"consumeLinter"}},"linter-ui":{"versions":{"1.0.0":"consumeUI"}}},"providedServices":{"linter-indie":{"versions":{"2.0.0":"provideIndie"}}},"dependencies":{"atom-package-deps":"^5.1.0","atom-select-list":"^0.7.2","lodash":"^4.17.15","minimatch":"^3.0.3"},"devDependencies":{"eslint-config-steelbrain":"^7.0.0","flow-bin":"^0.102.0","jasmine-fix":"^1.3.1"},"package-deps":["linter-ui-default"],"configSchema":{"lintPreviewTabs":{"type":"boolean","description":"Lint tabs while they are still in preview status","default":true,"order":1},"lintOnOpen":{"title":"Lint on Open","description":"Lint files automatically when they are opened","type":"boolean","default":true,"order":2},"lintOnChange":{"title":"Lint on Change","description":"Lint files while typing, without the need to save (only for supported providers)","type":"boolean","default":true,"order":3},"lintOnChangeInterval":{"title":"Lint on Change Interval","description":"Interval at which linting is done as you type (in ms)","type":"integer","default":300,"order":4},"ignoreGlob":{"title":"Ignore files matching this Glob","type":"string","default":"**/*.min.{js,css}","order":5},"disabledProviders":{"title":"Disabled providers","type":"array","items":{"type":"string"},"description":"Names of disabled linter providers","default":[],"order":6}},"downloads":6727089,"stargazers_count":4573},{"name":"linter-cwl","main":"index.js","version":"0.5.0","private":true,"description":"CWL Linter Package","keywords":["lint","linter-cwl","cwl"],"repository":{"type":"git","url":"https://github.com/manabuishii/linter-cwl"},"configSchema":{"executablePath":{"type":"string","default":"schema-salad-tool","description":"Full path to the schema-salad-tool"},"validateYamlPath":{"type":"string","default":"CommonWorkflowLanguage.yml","description":"Full path to the validation file (ie. CommonWorkflowLanguage.yml)"}},"bugs":{"url":"https://github.com/manabuishii/linter-cwl/issues"},"license":"MIT","engines":{"atom":">=1.4.0 <2.0.0"},"package-deps":["linter"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.5.0"},"readme":"#\n\nlinter for CWL\n\n# Prerequisite\n\nSetup path for `schema-salad-tool` and `CommonWorkflowLanguage.yml`\n\n![Setup path for schema-salad-tool and CommonWorkflowLanguage](./setup.png)\n","downloads":847,"stargazers_count":0},{"name":"linter-sqf","main":"./lib/init.js","version":"0.1.2","keywords":["sqf","arma","lint","linter"],"description":"Linter for sqf (arma) language.","repository":"https://github.com/LordGolias/linter-sqf","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"package-deps":["linter"],"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.0.1"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"readme":"# linter-sqf\n\nThis linter plugin for [Atom-Linter](https://atomlinter.github.io/) that\nprovides an interface to [sqf linter](https://github.com/LordGolias/sqf),\na linter for the SQF language.\n\nSee also [language-arma-atom](https://atom.io/packages/language-arma-atom).\n\n## Installation\n\n1. Install [Python 3](https://www.python.org/downloads/) (it must be >=3!)\n2. Download or clone the [sqf linter](https://github.com/LordGolias/sqf).\n3. Install it in a virtualenv or other in the system (`pip install -e .` in powershell).\n4. Copy the full path of the `sqflint` script, e.g.\n\n```\n    /Users/lordgolias/.virtualenvs/sqflint/bin/sqflint\n    C:\\Program Files (x86)\\Python36-32\\Scripts\\sqflint.exe\n```\n\n(in powershell, you get this with `get-command sqflint`).\n\n5. Install this package e.g. in the Atom settings. It will ask you to install some dependencies.\n6. Go to the settings of this package, and put the path above into the `Executable Path` setting.\n7. Create a new file `test.sqf` in atom, and fill it with `bla]` (i.e. wrong SQF code). You should see an error message.\n\n## Update\n\nThe sqflint is often updated in github. When you install it with `pip install -e .`,\nyou can update the directory you installed it from (e.g. `git fetch origin; git reset --hard origin/master`).\nOtherwise, you can just uninstall it (`pip uninstall sqflint`) and install the new version.\n","downloads":1509,"stargazers_count":0},{"name":"linter-lsc","main":"./src/index","version":"2.4.0","description":"Atom linter plugin for LiveScript, using lsc.","repository":"https://github.com/AtomLinter/linter-lsc.git","license":"MIT","scripts":{"test":"apm test","lint":"eslint ."},"engines":{"atom":">=1.7.0 <2.0.0"},"keywords":["atom","livescript","linter","lsc"],"package-deps":["linter:2.0.0"],"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.6.0","livescript":"1.5.0"},"devDependencies":{"eslint":"^4.4.1","eslint-config-airbnb-base":"^11.3.1","eslint-plugin-import":"^2.7.0","jasmine-fix":"^1.0.1"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"eslintConfig":{"extends":"airbnb-base","rules":{"global-require":"off","import/no-unresolved":["error",{"ignore":["atom"]}]},"globals":{"atom":true},"env":{"node":true,"browser":true}},"readme":"[Linter]: https://github.com/AtomLinter/Linter\n[LiveScript]: http://livescript.net/\n[lsc]: http://livescript.net/#usage\n\n# linter-lsc\n\nThis linter plugin for [Linter][] provides an interface to [lsc][]. It will be used with files that have the \"[LiveScript][]\" syntax.\n\n## Installation\n\nOn first activation the plugin will install all dependencies automatically, you no longer have to worry about installing Linter.\n\n### Plugin installation\n\n```\n$ apm install linter-lsc\n```\n","downloads":3531,"stargazers_count":7},{"name":"linter-erb","main":"./lib/index.js","version":"1.1.5","private":true,"description":"Linter plugin for ERB, using erb -x","repository":{"type":"git","url":"https://github.com/AtomLinter/linter-erb.git"},"keywords":["linter","lint","erb"],"configSchema":{"erbExecutablePath":{"description":"Path to the `erb` executable","type":"string","default":"erb"},"trimMode":{"description":"What trim mode ERB should use","type":"string","enum":["None","0","1","2","-"],"default":"-"},"rubyExecutablePath":{"description":"Path to the `ruby` executable","type":"string","default":"ruby"}},"bugs":{"url":"https://github.com/AtomLinter/linter-erb/issues"},"homepage":"https://github.com/AtomLinter/linter-erb#readme","license":"MIT","engines":{"atom":">=1.7.0 <2.0.0"},"scripts":{"lint":"eslint .","test":"apm test"},"dependencies":{"atom-linter":"10.0.0","atom-package-deps":"5.1.0"},"devDependencies":{"@commitlint/cli":"8.1.0","@commitlint/config-conventional":"8.1.0","@commitlint/travis-cli":"8.1.0","@semantic-release/apm-config":"6.0.1","husky":"3.0.5","semantic-release":"15.13.24","eslint":"6.2.2","eslint-config-airbnb-base":"14.0.0","eslint-plugin-import":"2.18.2","jasmine-fix":"1.3.1"},"eslintConfig":{"extends":"airbnb-base","rules":{"global-require":"off","import/no-unresolved":["error",{"ignore":["atom"]}]},"globals":{"atom":true},"env":{"node":true,"browser":true}},"package-deps":["linter","language-ruby"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"activationHooks":["language-ruby:grammar-used","language-ruby-on-rails:grammar-used"],"renovate":{"extends":["config:base"],"semanticCommits":true,"rangeStrategy":"pin","packageRules":[{"packagePatterns":["^eslint"],"groupName":"ESLint packages"}]},"release":{"extends":"@semantic-release/apm-config"},"commitlint":{"extends":["@commitlint/config-conventional"]},"husky":{"hooks":{"commit-msg":"commitlint -E HUSKY_GIT_PARAMS"}},"readme":"# linter-erb\n\nThis package will lint your ERB files in Atom by running them through `erb -x`\nand sending the output to `ruby -c` for checking.\n\n## Installation\n\n### Ruby\n\nBefore using this package you will need to have [Ruby][] installed and\navailable from your `$PATH`.\n\n### Plugin installation\n\nThe [Linter][] and package will be installed for you to provide an interface\nto this package. If you are using an alternative debugging interface that\nsupports linter plugins simply disable [Linter][].\n\nIf you do not already have it installed, [language-ruby][] will also be\ninstalled for you.\n\nTo install this package either search for it from within Atom's settings menu\nor run the following command.\n\n```ShellSession\napm install linter-erb\n```\n\n## Settings\n\nAll of linter-erb's settings are available from within Atom's settings menu.\nIf you prefer to manually edit the configuration file the following settings\nare available:\n\n*   `erbExecutablePath`: Defaults to `erb`, allowing the `$PATH` to resolve the\n    correct location. If you need to override this specify the full path to\n    `erb`.\n\n*   `rubyExecutablePath`: Defaults to `ruby`, allowing the `$PATH` to resolve\n    the correct location. If you need to override this specify the full path to\n    `ruby`.\n\n*   `trimMode`: Select the trim mode used by ERB when generating the code\n    before sending off to Ruby for checking. Defaults to `-` for out-of-the-box\n    compatibility with Rails. For a full description of what the options mean\n    see [the documentation][erb-docs].\n\n    _**Note**_: Modes other than `None` _may_ cause the error line numbers to\n    not match the source line numbers.\n\n### Finding the full path\n\nIf you are unsure of the location on your system of a program there are\nutilities you can use to find the full path. For example to find the path to\n`erb` you would run one of the following:\n\n*   On a UNIX / OS X system simply run `which erb` in a terminal. You should\n    get something similar to `/usr/bin/erb`.\n\n*   On Windows run `where.exe erb` in a prompt. You should get back something\n    similar to `C:\\Ruby22\\bin\\erb`.\n\n[linter]: https://github.com/atom-community/linter \"Linter\"\n[language-ruby]: https://github.com/atom/language-ruby \"language-ruby\"\n[ruby]: http://www.ruby-lang.org/ \"Ruby\"\n[erb-docs]: https://docs.oracle.com/cd/E53394_01/html/E54763/erb-1.html\n","downloads":75389,"stargazers_count":170},{"name":"linter-gml","version":"0.1.3","description":"A GML (GameMaker language) linter","main":"index.js","repository":"https://github.com/ThomasHickman/linter-gml","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"engines":{"atom":">=0.189.0 <2.0.0"},"keywords":["GML","GameMaker","linter","error check"],"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"author":{"name":"Thomas Hickman"},"license":"MIT","dependencies":{"gml-pegjs":"^0.1.0"},"readme":"# linter-gml\nLinting of GML (GameMaker language) files. Uses the [linter](https://atom.io/packages/linter) package.\n\n## Installation\n\nFirst install [language-gml](https://atom.io/packages/language-gml) and [linter](https://atom.io/packages/linter) (the dependencies)\n```bash\napm install language-gml linter\n```\nThen install this package\n```bash\napm install linter-gml\n```\n\n## Development\n\nAt the moment, most of the linting is done by [gml-pegjs](https://github.com/ThomasHickman/gml-pegjs), if an error is being reported wrong, add a new issue [here](https://github.com/ThomasHickman/gml-pegjs/issues/new). If you want to improve the linter beyond this or correct something that is handled by this package, you could correct it here, by running:\n\n```bash\ngit clone https://github.com/ThomasHickman/gml-pegjs # or your fork\napm install linter language-gml # if you haven't installed these\ncd ./gml-pegjs\nnpm install\n```\n\n## Related packages\n\n  * [autocomplete-gml](https://atom.io/packages/autocomplete-gml)\n","downloads":1584,"stargazers_count":1},{"name":"linter-xo","version":"0.29.0","description":"Linter for XO","license":"MIT","repository":"xojs/atom-linter-xo","author":{"name":"Sindre Sorhus","email":"sindresorhus@gmail.com","url":"sindresorhus.com"},"private":true,"engines":{"atom":">=1.34.0"},"scripts":{"lint":"xo --ignore='mocks/**/*'","pretest":"npm run lint","test":"ava"},"keywords":["javascript","linter","eslint","code-style","xo"],"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^5.0.0","eslint-rule-documentation":"^1.0.0","load-json-file":"^5.1.0","p-props":"^1.0.0","pkg-dir":"^3.0.0","resolve-from":"^4.0.0","xo":"^0.24.0"},"devDependencies":{"@babel/register":"^7.0.0","ava":"^1.1.0","proxyquire":"^2.0.1","text-buffer":"^13.15.2","tmp":"0.0.33"},"package-deps":["linter:2.0.0"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"ava":{"require":["@babel/register"]},"babel":{"presets":["@ava/stage-4"]},"xo":{"globals":["atom"]},"readme":"# linter-xo [![Build Status](https://travis-ci.org/xojs/atom-linter-xo.svg?branch=master)](https://travis-ci.org/xojs/atom-linter-xo)\n\n> [Linter](https://github.com/atom-community/linter) for [XO](https://github.com/xojs/xo)\n\n![](screenshot.png)\n\n\n## Install\n\n```\n$ apm install linter-xo\n```\n\nOr, Settings → Install → Search for `linter-xo`.\n\n\n## Usage\n\nJust write some code.\n\nSettings can be found in the `Linter` package settings. XO [config](https://github.com/xojs/xo#config) should be defined in package.json.\n\n**Note that it will only lint when XO is a dependency/devDependency in package.json.**<br>\nThis is to ensure it doesn't activate and conflict on projects using another linter, like ESLint.<br>\n[We're considering a way to manually enable XO.](https://github.com/xojs/atom-linter-xo/issues/21)\n\n### Fix\n\nAutomagically fix many of the linter issues by running `XO: Fix` in the Command Palette.\n\n#### Fix on save\n\nYou can also have it fix the code when you save the file. *(Only when XO is used in the project)*\n\nEnable it by going to; Settings → Packages → linter-xo → Settings, and then checking `Fix On Save`.\n\n\n## License\n\nMIT © [Sindre Sorhus](https://sindresorhus.com)\n","downloads":34020,"stargazers_count":43},{"name":"linter-frege","main":"./lib/atom-linter-frege.js","version":"1.0.0","description":"A linter for Frege, a Haskell for the JVM","keywords":["linter","linter-frege","Frege"],"license":"MIT","engines":{"atom":">=1.4.0 <2.0.0"},"dependencies":{"atom-linter":"^5.0.1"},"package-deps":["linter"],"readmeFilename":"README.md","repository":{"type":"git","url":"git+https://github.com/paxromana96/atom-linter-frege.git"},"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"readme":"# atom-linter-frege package\n\nLint Frege in Atom on save.\n","downloads":437,"stargazers_count":0},{"name":"linter-gams","main":"./lib/main","version":"1.6.4","description":"A linter provider for GAMS language","keywords":["atom-linter","linter-gams"],"repository":"https://github.com/chrispahm/linter-gams","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.4.1","css":"^2.2.4","esprima":"^4.0.0","find-up":"^2.1.0","fuzzaldrin":"^2.1.0","glob":"*","htmlparser2":"^3.9.2","jquery":"^3.4.1","lodash":"^4.17.15","parse-columns":"^1.3.0","readline-specific":"^1.0.4","shelljs":"^0.8.1","simple-undo":"^1.0.2","vue":"^2.6.10"},"package-deps":["linter","language-gams","autocomplete-gams","gams-helpers","console-panel"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"consumedServices":{"console-panel":{"versions":{"^1.0.0":"consumeConsolePanel"}}},"readme":"# linter-gams\n\nA GAMS IDE plugin for Atom. Provides a compilation checker for your [GAMS](https://www.gams.com/) models,\na sidebar for symbol investigation/navigation, and a data panel. Also supports listing files (.lst).\n![linter-gams](https://user-images.githubusercontent.com/20703207/40918732-754cd8de-6807-11e8-8e41-b1231e625d9a.gif)\n\nWhen you run into issues or bugs, please be so kind and submit an issue here on GitHub, or write a short mail.\n\n## Installation\nYou can install from Settings view (`shift-comma`) by searching for `linter-gams`.\n\nAlternatively, you can install through the CLI by running:\n\n```\napm install linter-gams\n```\n\n## Configuration\n### Global configuration\n![settings](https://user-images.githubusercontent.com/20703207/43004451-1f473a2c-8c30-11e8-9a51-8203fc7121b0.png)\n\nIn order to function properly, linter-gams needs a valid GAMS executable. It will check for the latest GAMS version found in the PATH variable and the default install directories (Win: `C:/GAMS/*/*/`, `N:/soft/GAMS*/`, OSX: `/Applications/GAMS*/sysdir/`).\nIf no installation was found in the default directories, you need to specify one in the packages settings pane (as shown in the picture above). `Linter-gams` runs on top of a regular GAMS installation, therefore the general [GAMS licensing](https://www.gams.com/latest/docs/UG_License.html) restrictions apply.\n\nLinter-gams will try to find out if your GAMS file is part of a [GGIG](http://www.ilr.uni-bonn.de/em/rsrch/ggig/ggig_e.htm) project and will do the necessary adjustments by itself. If you are working on a (non GGIG) multi-file model and want to specify the GAMS entry file, you may do so in the package settings pane. Note that you don't need to specify a path, but rather the actual entry point file name (e.g. entryFile.gms). Linter-gams will search for this file in the parent directories.\n\n\n## Usage\n\nlinter-gams will install all necessary packages for GAMS development. Those include [syntax highlighting](atom-language-gams), the [base linter](https://atom.io/packages/linter) (used for error underlining), and some [GAMS helper](https://atom.io/packages/gams-helpers) functions which will be explained here.\n\nIf you work on a GGIG project (CAPRI / FARMDYN), make sure you add the `trunk` folder (the one containing the `gams` and `GUI` folder) of your checkout as your Project Folder in Atom (`ctrl-shift-a` or File -> Add Project Folder...).\n\n### Error underlining / linting\nThis feature is enabled by default, and will work as long as a valid GAMS executable is defined in the settings pane. The appearance of the linter can be adjusted by changing the settings in the `linter-ui-default` package. For GAMS development, I currently use the settings as shown in the following image:\n\n![linter-settings](https://user-images.githubusercontent.com/20703207/38366895-789ff5fc-38e1-11e8-95fe-f70dea16e1a8.PNG)\n\nNote that only the first error will be displayed, as typically subsequent errors may be resulting from that first error. Also note that errors will only be shown in active files -> if you work on a file which is currently not enabled (e.g. due to GUI settings in GGIG projects) no error checking will be done on that file.\n\n### Symbol overview\nIn order to inspect where a variable/parameter/set was defined/assigned values/controlled/referenced or just to see its description, you can open `GAMS View` by using the shortcut `ctrl-o` or by opening the command palette (`ctrl-shift-p`) and typing `gams: show`. If the cursor is set inside a known symbol, the sidebar will be updated accordingly. A click on a given entry will jump to that symbol (also if the symbol is in another file). If you want to keep the sidebar from constantly updating while moving the cursor (e.g. when deeply inspecting a given symbol), you can click the lock button in the top left corner.\n\nYou can also search for a symbol with the searchbar shown at the upper part of the sidebar.\n\n\n![sidebar](https://user-images.githubusercontent.com/20703207/40918757-892cfd84-6807-11e8-8cbe-d1a01b6aff8d.PNG)\n\n\n### Data panel (beta)\n![data panel](https://user-images.githubusercontent.com/20703207/44646597-d61da880-a9db-11e8-8b09-99c11ad04ab0.gif)\n\nValues of sets and paramters, as well as the equation listing for equations or the column listing for variables can be shown with the new data panel feature. In order to activate, turn on the configuration in the `linter-gams` configuration panel, open the bottom dock and then click on a GAMS symbol (as shown in the GIF above). The data panel feature will parse your GAMS file for solve statements, and will try to show the available data right before any solve statement. You can cycle through the solve statements with a dropdown menu at the top right of the data panel.\n\n### Running your model\n\nThere are multiple options for running your model: You can either press the 'run' button in the sidebar, by pressing `shift-enter` or by opening the command palette (`ctrl-shift-p`) and typing `GAMS run` or just `run`. The model will be solved in the background, so you can continue working. While the model is solving, the `busy-signal` dot (usually green) at the bottom will be blinking. Once the model is solved, the listing file will be opened automatically in a new pane.\n\n### Re-parsing a listing file\n\nIt may occur that the `.lst` file was openend in Atom before GAMS finished writing all information to the file.\nThis may lead to the sidebar not showing the correct line positions and symbols in the sidebar.\nThe listing file can be re-parsed by running the `gams: reload-listing` command from the command palette (`ctrl-shift-p`/`cmd-shift-p`).\n\n### Inspecting a parameter / set at a given position\n\nSometimes you need to check your parameters/sets values at a given position. Often, an abort statement is used in order to stop execution at that point and to display the values of the parameter. Linter-gams gives you two options on how to speed up that process:\n\nIf you type\n```GAMS\nabort myParameterOrSet;\n```\nand run your model (see section above), linter-gams will automatically jump to the parameter display in the listing file. Make sure you have the GAMS View sidebar opened (shift-o), otherwise the listing file will be opened at the beggining of the document.\n\n### Project configuration\nWhen working with multiple projects, individual project configuration files can be specified. The project file should be located in the projects `root` directory. If you need to specify a model-entry file, make sure that the `.gamslintc.js` file is in the same directory.\n\nExample of a `.gamslintc.js` configuration file.\n```js\nmodule.exports = {\n  'Gams Executable': 'String',\n  'Scratch directory': 'String',\n  'Jump to Abort': true,\n  'Auto unfold listing entries treshold': 10,\n  'Only auto unfold display statements': true,\n  'Default parameter to jump to after solve': 'gamsParameter',\n  'Multi-file entry point': 'my_model.gms',\n  'Command Line Arguments - Compilation': ['--myArg=3','--myOtherArg5'],\n  'Command Line Arguments - Execution': ['--myArg=3','--myOtherArg5'],\n  'Parse symbol values': false,\n  'Console limrow': 3,\n  'Console limcol': 3,\n  'Console dispWidth': 15\n}\n```\n\n## Gotchas\nIt may occur, that the `GAMS View` sidebar is not updating for a symbol that you click upon.\n\nIn that case, the symbol you clicked is not read by the GAMS compiler, and you need to check your code logic (e.g. `$if` statements) for why the symbol is not read.\nExample\n```GAMS\n$SETGLOBAL Country \"France\"\n\n$iftheni.de %Country%==\"Germany\"\n  set test / 'Lederhosen', 'Wurst'/;\n* If you click on `test`, `Gams View` will not update or show anything\n* because this part of the code is not read by the compiler.\n* It will show just fine if you change the value of the $SETGLOBAL to \"Germany\"\n$endif.de\n```\n\n### Other things I found useful in Atom for GAMS coding\n  - The pre-installed autosave functionality (Settings -> Packages -> Autosave -> Enable (it's a checkbox inside the packages settings)).\n  - Using the fuzzy file finder `ctrl-p` instead of searching for a file in the project tree view\n  - Using the main shortcut `ctrl-shift-p` and then type what you want to do (like `Bookmark`, `top`, `bot`)\n  - Jumping to the next error (even if its in a different file) by opening the command palette (`ctrl-shift-p`) and typing `linter next` or even shorter `li ne`. You can also click on the error in the error pane at the bottom.\n  - The amazing [filter-lines](https://atom.io/packages/filter-lines) package (especially useful in Listing files). Just highlight the desired word/symbol and press `ctrl-alt-f`. Similar to KEDITS ALL command.\n\n\n## Contributing\n\nPlease feel free to submit an issue or a pull request!\n\n## License\n\nlinter-gams is available under the [MIT license](http://opensource.org/licenses/MIT).\n\nNote that this packages is not affiliated to the official GAMS development corp.\n","downloads":1618,"stargazers_count":1},{"name":"linter-toml","main":"./lib/linter-toml","version":"0.1.1","private":true,"description":"A linter for toml","keywords":["linter","toml"],"bugs":{"url":"https://github.com/KnownUnown/linter-toml/issues"},"repository":"https://github.com/KnownUnown/linter-toml","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"package-deps":["linter"],"dependencies":{"atom-package-deps":"^4.6.0","toml":"^2.3.2"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"readme":"# linter-toml\n\nThis package provides a [Linter](https://github.com/atom-community/linter) interface for [toml](https://github.com/BinaryMuse/toml-node).\n\n## Installation\n\n`$ apm install linter-toml`\n","downloads":1152,"stargazers_count":2},{"name":"linter-vhdl","main":"./lib/main","version":"1.2.0","author":"Sebastien Lacoste <contact@graphman.fr>","description":"Vhdl linter","keywords":["linter","vhdl"],"private":true,"repository":"https://github.com/graphman65/linter-vhdl","license":"MIT","engines":{"atom":">=1.4.0 <2.0.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"package-deps":["linter"],"dependencies":{"atom-package-deps":">=4.6.0","child-process-promise":"^2.2.1"},"devDependencies":{"eslint":"^4.9.0","eslint-config-airbnb-base":"^12.1.0","eslint-plugin-import":"^2.8.0"},"readme":"VHDL linter\n======\n\nSmall atom linter for the VHDL language.\n\n### Requirements\n- [Linter](atom.io/packages/linter) atom package\n- A VHDL compiler ([ghdl](http://ghdl.free.fr/) is recommended)\n\n### Install\nYou can install through the CLI by doing:\n\n```$ apm install linter-vhdl```\n\nOr you can install from Settings view by searching for `vhdl`.\n\n### Custom ghdl arguments\n\nYou can provide custom arguments to the vhdl executable by adding a comment at the top of the file\n\n```-- args: [arguments]```\n\n##### Exemple\n\n```-- args: --ieee=synopsys```\n\n### Config\n- VHDL compiler path (default: ghdl)\n- Compile on lint (default: false)\n","downloads":3573,"stargazers_count":1},{"name":"linter-wast","main":"./lib/linter-wast","version":"0.5.3","description":"WebAssembly linter","keywords":["WebAssembly","linter","WASM","WAST"],"repository":"https://github.com/drom/linter-wast","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"wast-parser":"^0.31.0"},"package-deps":["linter"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"readme":"# linter-wast\n\nAtom linter for WebAssembly\n\n![screenshot](https://raw.githubusercontent.com/drom/linter-wast/master/screenshot.gif?raw=true)\n","downloads":491,"stargazers_count":0},{"name":"linter-sass-lint","main":"./lib/main","version":"1.9.0","description":"Atom Linter plugin to lint your Sass/SCSS with pure node sass-lint","repository":"https://github.com/AtomLinter/linter-sass-lint","license":"MIT","keywords":["Sass","scss","sass-lint","node-sass","linter"],"scripts":{"lint":"coffeelint lib && eslint spec"},"engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.6.0","consistent-env":"^1.3.1","globule":"^1.2.0","sass-lint":"1.12.1"},"package-deps":["linter:2.0.0"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"devDependencies":{"coffeelint":"^2.0.0","eslint":"^4.6.0","eslint-config-airbnb-base":"^12.0.0","eslint-plugin-import":"^2.7.0","jasmine-fix":"^1.3.0"},"eslintConfig":{"extends":"airbnb-base","globals":{"atom":true},"env":{"node":true}},"readme":"# linter-sass-lint\n\n[![Build Status](https://travis-ci.org/AtomLinter/linter-sass-lint.svg)](https://travis-ci.org/AtomLinter/linter-sass-lint)\n[![Circle CI](https://circleci.com/gh/AtomLinter/linter-sass-lint/tree/master.svg?style=shield)](https://circleci.com/gh/AtomLinter/linter-sass-lint/tree/master)\n[![Build status](https://ci.appveyor.com/api/projects/status/fd4oj1kb84uv5a54/branch/master?svg=true)](https://ci.appveyor.com/project/DanPurdy/linter-sass-lint/branch/master)\n\n[![apm](https://img.shields.io/apm/l/linter-sass-lint.svg)](https://atom.io/packages/linter-sass-lint)\n[![apm](https://img.shields.io/apm/dm/linter-sass-lint.svg)](https://atom.io/packages/linter-sass-lint)\n[![apm](https://img.shields.io/apm/v/linter-sass-lint.svg)](https://atom.io/packages/linter-sass-lint)\n\nThis linter plugin for [Linter](https://github.com/AtomLinter/Linter) provides an interface to [sass-lint](https://github.com/sasstools/sass-lint). It will be used with files that have the “Sass” or “SCSS” syntax.\n\n[sass-lint](https://github.com/sasstools/sass-lint) is a node only sass linter and isn't related to [scss-lint](https://github.com/brigade/scss-lint).\n\n### Installation\n\nYou'll need to have [Linter](https://atom.io/packages/linter) installed to use this plugin\n\n**The current latest version of [sass-lint](https://github.com/sasstools/sass-lint) comes bundled with this plugin but if you'd like to install it manually you can follow the instructions [here](https://github.com/sasstools/sass-lint).**\n\n#### Plugin installation\n\n```\napm install linter-sass-lint\n```\n\n#### .sass-lint.yml\n\nA `.sass-lint.yml` config file is required for this linter. You can find an example of one [here](https://github.com/sasstools/sass-lint/blob/master/lib/config/sass-lint.yml) and documentation on how to configure this and each of the rules [here](https://github.com/sasstools/sass-lint/tree/master/docs).\n\nBy default this plugin will search up the directory tree for this file, you can also specify a path to this config file in the plugin settings or in `~/.atom/config.cson` file. Usually you would place this config file in your projects root and keep it under version control too.\n\nYou can use the `noConfigDisable` option to prevent any attempts at linting (and the missing config error messages you will encounter) if a valid config is not found.\n\nBy default a config file found in the root of your currently open project will take preference over a config file specified with the `configFile` option.\n\n### Settings\n\nThere are three options you can configure either within the plugin or by editing your `~/.atom/config.cson` file.\n\n* `noConfigDisable` - Enable to prevent any linting if a valid config file (`.sass-lint.yml`) is not found in the project root.\n\n* `configFile` - this is path to a `.sass-lint.yml` config file, this should only be used if you'd like to specify a global config file rather than rely on a project config file in the root of your project.\n\n* `globalNodePath` This is where you can set your global node installation path. Run `npm get prefix` and paste the result here. This will be where `linter-sass-lint` will then search for the globally installed version of `sass-lint` if you choose to enable this with `globalSassLint`.\n\n* `globalSassLint` This allows you to specify that you want to use your globally installed version of `sass-lint` (`npm install -g sass-lint`) instead of the version bundled with `linter-sass-lint`.\n\n* `resolvePathsRelativeToConfig` This option allows you to choose to resolve file paths relative to your config file rather than relative to the root of your currently open project.\n\n### Extra File Extensions\n\nThis plugin will attempt to lint a file with framework specific file extensions on top of the usual `.scss` and `.sass` extensions such as with shopify's `.scss.liquid` extension as long as you still include `.scss` or `.sass` somewhere in the file, you must also ensure that the Atom grammar scope for that file is set to either SCSS or Sass depending on which it corresponds to.\n\nThis does not mean that sass-lint will be able to definitely parse any sort of non standard SCSS or Sass code and if you use any platform specific code in the file it will almost definitely produce a parse error. Sass-lint will not be moving to support any use of non standard language outside of the Sass spec.\n\n\n### Contributing\n\nContributions, suggestions and fixes are more than welcome.\n\nPlease read the [Contribution Guidlines](CONTRIBUTING.md)\n\nA general sense of the guidelines can be found below.\n\n1. Indentation is 2 spaces.\n1. All code should pass the coffeelinter linter, the config of which is included in this repository (`npm-test`).\n1. the .editorconfig file should be used to ensure a consistent style [info here](http://editorconfig.org/)\n\nGeneral contribution guidelines apply\n\n1. Fork the plugin repository\n1. Create a feature/hotfix branch off of master\n1. Lint your code `npm-test`\n1. Commit and push the branch\n1. Make a pull request\n\nIf you're unsure on whether your contribution will be required then please file an issue first and we can discuss it.\n\nIf you find any problems with the `sass-lint` itself with regards to bugs in rules then please visit the [sass-lint Github Page](https://github.com/sasstools/sass-lint) please note that `sass-lint` is young and still under heavy development.\n","downloads":260571,"stargazers_count":304},{"name":"linter-anylint","description":"Linter for any languages","version":"0.0.1","dependencies":{"anylint":"0.0.2","atom-linter":"^10.0.0","atom-message-panel":"^1.3.0","atom-package-deps":"^4.6.1","json5":"^0.5.1","rc":"^1.2.2"},"engines":{"atom":">=1.0.0 <2.0.0"},"keywords":["linter"],"license":"MIT","main":"./lib/linter-anylint","package-deps":["linter"],"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"repository":"https://github.com/fand/linter-anylint","readme":"# linter-anylint\n\nAtom linter using [fand/anylint](https://github.com/fand/anylint).\n","downloads":988,"stargazers_count":0},{"name":"linter-julia","main":"./lib/index.js","version":"0.7.4","private":true,"description":"Lint.jl support for Atom using the linter package","keywords":["Julia","julia","Lint.jl","linter","linter-julia"],"repository":"https://github.com/AtomLinter/linter-julia.git","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"scripts":{"lint":"(flow check) && (eslint . )","test":"(npm run lint) && (apm test)"},"dependencies":{"atom-linter":"10.0.0","atom-package-deps":"5.0.0","consistent-env":"1.3.1","uuid4":"1.1.4"},"package-deps":["linter:2.0.0"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"devDependencies":{"babel-eslint":"10.0.1","eslint":"5.14.0","eslint-config-airbnb-base":"13.1.0","eslint-plugin-import":"2.16.0","flow-bin":"0.93.0","jasmine-fix":"1.3.1"},"configSchema":{"executablePath":{"type":"string","description":"Path to julia.exe/julia","default":"julia","order":1},"ignoreInfo":{"type":"boolean","description":"Do not show infos","default":false,"order":2},"ignoreWarning":{"type":"boolean","description":"Do not show warnings","default":false,"order":2},"showErrorCodes":{"type":"boolean","description":"Show error codes on issues","default":true,"order":2},"ignoreIssueCodes":{"type":"array","description":"Ignore issues that match with these codes","default":[],"order":3,"items":{"type":"string"}}},"renovate":{"extends":["config:base"],"semanticCommits":true,"rangeStrategy":"pin","packageRules":[{"packagePatterns":["^eslint"],"groupName":"ESLint packages"}]},"eslintConfig":{"extends":"airbnb-base","parser":"babel-eslint","rules":{"global-require":"off","import/no-unresolved":["error",{"ignore":["atom"]}]},"globals":{"atom":true},"env":{"node":true,"browser":true}},"readme":"# linter-julia\n\nThis linter plugin for [AtomLinter](https://atomlinter.github.io/)\nprovides an interface to [Lint.jl](https://github.com/tonyhffong/Lint.jl).\nIt will be used with files that have the `Julia` syntax.\n\n![screenshot](https://raw.githubusercontent.com/AtomLinter/linter-julia/master/Screenshot.gif)\n\n## Installation\n\nInstall the package through Atom's UI, or use the `apm` tool in the CLI:\n\n```bash\n$ apm install linter-julia\n```\n\nNote: if you have't installed [Juno](http://junolab.org/),\nyou need to tell linter-julia where to find the julia executable\n(i.e. `/usr/bin/julia`). See Settings below.\n\nIn order to use this package, you will need to install Julia and Lint.jl\n(version 0.3.0 or higher).\nTo get Julia see: http://julialang.org/downloads/ and to get Lint.jl\nsee: https://github.com/tonyhffong/Lint.jl#installation\n\n## Settings\n\n![screenshot](https://raw.githubusercontent.com/AtomLinter/linter-julia/master/settings.png)\n\n## Features\n\n* By default linter-julia uses Juno's `julia`\n* You can give a path to the `julia` executable that you want to use for Linting\n* You can ignore the messages you don't need\n\n[Issues](https://github.com/AtomLinter/linter-julia/issues) and [pull requests]\n(https://github.com/AtomLinter/linter-julia/pulls) are welcome.\n\n## CHANGELOG\n\n[See the full CHANGELOG here.](https://github.com/AtomLinter/linter-julia/blob/master/CHANGELOG.md)\n","downloads":12566,"stargazers_count":8},{"name":"linter-dolo","main":"./lib/main","version":"0.2.4","description":"Linter plugin for dolo","repository":"https://github.com/albop/atom-linter-dolo","license":"MIT","engines":{"atom":">0.50.0"},"dependencies":{"atom-linter":"^4.6.1","atom-package-deps":"^4.0.1"},"package-deps":["linter"],"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"keywords":["atom","linter","yaml","dolo"],"readme":"# linter-dolo package\n\nUses dolo-lint to highlight errors in model files.\n\n![A screenshot of your package](https://f.cloud.github.com/assets/69169/2290250/c35d867a-a017-11e3-86be-cd7c5bf3ff9b.gif)\n","downloads":355,"stargazers_count":0},{"name":"linter-hsp3","main":"./lib/index","version":"0.2.2","private":true,"description":"HSP3 Linter Package","keywords":["linter-hsp3","hsp3"],"repository":"https://github.com/honobonosun/linter-hsp3","license":"MIT","engines":{"atom":">=1.4.0 <2.0.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"dependencies":{"async-lock":"^1.1.3","encoding-japanese":"^1.0.29","iconv-lite":"^0.4.24"},"readme":"# linter-hsp3\nhspc.exeを使って、linterにエラーなどを通知するパッケージです。\n\n## パッケージの導入方法\n1. このパッケージの前提となるatomパッケージ「[linter](https://atom.io/packages/linter)」をインストールしてください。\n2. ターミナル（またはコマンドプロンプト）で、`apm install linter-hsp3`コマンドを実行してください。  \n   GUIからインストールする場合、Atomの設定画面「install」タブから「linter-hsp3」を検索して、installしてください。\n3. HSP3をインストールしたディレクトリ（つまり、hspcmp.dllがある場所）に、[hspc.exe](http://dev.onionsoft.net/seed/info.ax?id=1392)  を導入してください。\n4. linter-hsp3にhspc.exeのパスを設定します。パッケージ詳細画面にある「Compiler Settings」の「Compiler path」にhspc.exeの絶対を設定してください。\n5. Atomを再起動します。（または、<kbd>Ctrl-Shift-F5</kbd>キーを押す）\n\n# 主な機能と動作\nlinter-hsp3は、hspファイルまたは、asファイルを編集するごとに、hspc.exeにコンパイルさせます。コンパイルが失敗したら、linterに通知します。表示はlinterのGUIに委ねられます。\n\nhspc.exeは、コンパイルに成功した場合、axファイルを出力します。このファイルはストレージに保存されます。linter-hsp3を導入すると、このパッケージの都合でaxファイルが作成と保存する場合があることに留意してください。\n\n既定値では、axファイルは「obj」ファイル名で保存されます。\n\n## hspc.exe Dオプションの有効化\nhspc.exe version 1.4.1以降には、Dオプションが実装されました。このオプションを有効化するには、パッケージの設定画面「Command option」の一文字オプションに**D**文字を挿入するだけです。\n\n## 入出力の非同期化\nlinter-hsp3 version 0.1.0以降、hspc.exeとファイルIOの非同期化を行いました。エディタで編集中でも、解析を行います。PCスペック不足で重くなる場合、オプション「未保存のエディタを解析する」のフラグを閉じてください。従来通りに保存時のみ解析を行います。**設定を反映させるには、atomを再起動してください。**\n\n# バグについて\n開発中です。もしかすると、不具合がいっぱいあるかもしれません。\n\n## 既知の不具合\n* ~~ファイルパスに空白があると、hspcがソースファイルを見つけられない。~~\n  * ~~空白文字バイナリの変化？~~\n* エラーを指摘している文字列が文字化けする。\n  * hspc.exeがUTF-8出力に対応していないため、この不具合が発生しています。申し訳ございませんが、解決は未定です。\n  * 回避策は、ソースファイルのコードページをShift_JISに固定することです。hspc.exeは、Shift_JISでコンソールに出力しています。\n\n# 使用したコードとライセンス表記\n\n## linter-hsp3\nMIT License  \nCopyright (c) 2017-2018 Honobono\n\n## [iconv-lite](https://www.npmjs.com/package/iconv-lite)\nMIT License\n\nCopyright (c) 2011 Alexander Shtuchkin\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n## [encoding.js](https://github.com/polygonplanet/encoding.js)\nMIT License  \nauthor : polygon planet <polygon.planet.aqua@gmail.com>\n\n## [async-lock](https://www.npmjs.com/package/async-lock)\nThe MIT License (MIT)\n\nCopyright (c) 2016 Rogier Schouten <github@workingcode.ninja>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","downloads":396,"stargazers_count":0},{"name":"linter-biber","version":"0.1.0","description":"Bibliography linter for biber engine","main":"lib/main.js","repository":"https://github.com/Aerijo/linter-biber","bugs":"https://github.com/Aerijo/linter-biber/issues","keywords":["linter","biber","latex","biblatex"],"author":"Benjamin Gray","license":"MIT","dependencies":{"tree-sitter":"latest","tree-sitter-biber":"latest","yamljs":"latest","season":"latest"},"devDependencies":{"eslint":"^5.0.1"},"consumedServices":{"linter-indie":{"versions":{"2.0.0":"consumeIndie"}}},"configSchema":{"ignoredLints":{"type":"array","default":["14","1","16","7","5"],"items":{"type":"string"}},"maxNumberOfLines":{"type":"integer","default":10000,"description":"Use this to customise roughly how many lines will be linted before giving up. Restart required to apply changes"},"configFile":{"type":"object","properties":{"configFileType":{"title":"Config File Type (currently unused)","order":10,"type":"string","default":"none","enum":["latexcfg","other","none"]},"otherPath":{"title":"Other Path (currently unused)","order":11,"type":"string","default":""},"useGlobalConfig":{"title":"Use Global Config","order":1,"type":"boolean","default":false},"globalConfigPath":{"title":"Global Config Path","description":"Restart Atom to apply any changes","order":2,"type":"string","default":""}}},"activeStyle":{"description":"Restart Atom to apply any changes","type":"string","default":"default_datamodel","enum":["default_datamodel","ACM-Reference-Format","archaeologie","apa","aefkw","afwl","amit","archa","authoryear-archaeology","authoryear-comp-archaeology","authoryear-ibid-archaeology","authoryear-icomp-archaeology","dguf-alt","dguf-apa","dguf","eaz-alt","eaz","foe","jb-halle","jb-kreis-neuss","karl","maja","mpk","mpkoeaw","nnu","numeric-comp-archaeology","offa","rgk-inline","rgk-numeric","rgk-verbose","rgzm-inline","rgzm-numeric","rgzm-verbose","ufg-muenster-inline","ufg-muenster-numeric","ufg-muenster-verbose","verbose-archaeology","verbose-ibid-archaeology","verbose-trad2note-archaeology","volkskunde","zaak","zaes","arthistory-bonn","bookinother","fiwi","fiwi2","biblatex-gost","iso-authortitle","iso-authoryear","iso-numeric","manuscripts-shared","morenames","oxalph","oxnotes","oxnum","oxyear","realauthor","cnltx","gitlog","gzt"]}},"readme":"# linter-biber\nAtom linting package for biber.\n\nShould be better than many tools out there (at least has potential to be), because it uses a full parser to read the file. Any linting mistakes should be reported to [the issues page](https://github.com/Aerijo/linter-biber/issues), or parsing issues to [the parser repo issues page](https://github.com/Aerijo/tree-sitter-biber/issues). If in doubt, just report to the linter repo and I'll deal with it.\n\n\n~~Inspiration for the kinds of errors and warnings comes from https://github.com/Pezmc/BibLatex-Check/blob/master/biblatex_check.py~~\nLargely diverged now I believe.\n\n### Requirements\n- [`atom-ide-ui`](https://atom.io/packages/atom-ide-ui), or\n-  [`linter`](https://atom.io/packages/linter) and  [`linter-ui-default`](https://atom.io/packages/linter-ui-default).\n\n### Settings\n\nCurrently, the style must be set manually. Any settings changes also require restarting Atom to be applied (including changing config files).\n\n### Config\n\nA goal of this package is to automatically generate the rules for a given grammar. This technically works, but many grammars define rules in places I haven't added support for yet. So, for the time being, you will probably need to make use of a config file to fine tune the expected entries and fields for your style.\n\nThere are two possible config sources: a global config, applied to all projects, and a local config that is only applied to a specific project.\n\n_Note that local config support has not been added yet._\n\nBoth these configs use the same syntax. The file itself is a JSON, JS, CSON, or YAML format (or `.latexcfg` under the key `linter-biber`; not supported yet though).\n\nAt the top level object, there are two optional properties: `global` and `styles`. `global` immediately takes the config settings, while `styles` is an object where the keys are style names, and the values are config settings for that specific style. E.g. (a YAML example),\n\n```yaml\nglobal:\n  lints:\n    - ...\n  fields:\n    - ...\n  entries:\n    - ...\n\nstyles:\n  apa:\n    lints:\n      - ...\n    entries:\n      - ...\n  oxyear:\n    lints:\n      - ...\n```\n\nAs shown above, the three recognised config keys are `lints`, `fields`, and `entries` (note all are optional). The order of these keys is irrelevant.\n\n- `lints`: This takes commands of the form `watch 2, 5, 1, ...`, which tells the linter to enable the lints with these numbers (if currently disabled). Similarly, `ignore ...` will disable the lints with those numbers. The shorthand `w` and `i` can alternatively be used.\n- `fields`: This takes commands of the following possible forms:\n  - `(a|add) fieldName {derives=otherField, type=field, format=null, datatype=date, skipout, label, nullok}`\n  - `(s|set) existingFieldName {...}`\n  - `(r|remove) fieldName`\n  - `alias aliasFieldName {actualField}`\n\n  The `add` command makes a new field, overriding any existing field. The `derives` option lets you use the other field as the default properties, and alter them with `type`, `datatype`, `nullok`, etc. It's probably easiest to just derive from a similar class, instead of trying to set the other properties.\n\n  The `set` command is the same as `add`, but it alters an existing field (so using `derives` will potentially change all it's properties).\n\n  The `remove` command does what it says.\n\n  The `alias` command lets you make a new name for an existing field. Unlike `add ... {derives=...}`, this will also update any constraints on the fields in entries. For example, `alias title {journaltitle}` will make it so that `title` is valid anywhere `journaltitle` is.\n\n- `entries`: This takes commands of the form\n  - `(a|add) entryName {derives=entry, skipout=false, add=[field1, field2, ...], remove=[f3, f4, ...]}`\n  - `(s|set) entryName {...}`\n  - `(r|remove) entryName`\n  - `require entryName {all=[f1,...], some=[], one=[], rall=[], rsome=[], rone=[]}`\n\n  `add`, `set`, and `remove` work much like with fields. The new options `add` and `remove` refer to the fields that can be expected within the entry. For example, `set article {add=publisher}` will make the `publisher` field valid inside an `article`. To specify multiple fields, you can use the syntax `add=[f1, f2, f3, ...]`. `remove` is similar, but marks the field as unexpected.\n\n  `require` refers to the constraints on an entry. These corresponds to the warnings the say `expected all of ...` or `expected at least one of [...]`. To add always required fields, add them with the `all` key. To remove this kind of requirement, use the `rall` key (`r`(emove) `all`). To add \"at least one of\" fields, place all the possible fields in a group like this `some=[f1, f2, f3, ...]`. When at least one of these fields is present, the constraint is satisfied. To remove a field from all of the \"some\" types of constraint, use `rsome`. For example, `rsome=year` removes the option for `year`, and will make `date` required (if that \"some\" constraint was originally present). Finally, `one` and `rone` are the same as `some` and `rsome`, but the \"some\" condition is changed to \"exactly one\".\n\nIn general, the same option keys can be repeated as much as you like in a single command. This is how you might add multiple some conditionals in one command (though you could just split them over several commands if you prefer).\n\nThe execution order is as follows:\n  - The global config is applied, then the local one, then the ignored lints in the settings.\n  - In a config file, the global property is applied first, then the style specific property.\n  - First, the `fields` property is evaluated, then `entries`.\n  - All commands are evaluated top to bottom. All options in each command are evaluated left to right.\n\nIn conflicts, future commands will override earlier ones.\n\nAs an example, here's one that allows the `article` entry to contain `publisher`, and converts the requirement of both `title` and `journaltitle` to just at least one of them.\n\n```yaml\nglobal:\n  entries:\n    - set article {add=publisher}\n    - require article {rall=[title, journaltitle], some=[title, journaltitle]}\n```\n\nAnd again, but in JSON\n```json\n{\n  \"global\": {\n    \"entries\": [\n      \"set article {add=publisher}\",\n      \"require article {rall=[title, journaltitle], some=[title, journaltitle]}\"\n    ]\n  }\n}\n```\n\nHopefully, future improvements in style definition parsing will reduce the need to rely on this. It should suffice for now though.\n\n\n### Numbering\n\nThe numbers are a mess right now, and will not be permanent. I normally just used the first number I could think of that (probably) hadn't been used somewhere else. All numbers are less than 1000, and you don't need to include the leading `0`'s when adding rules about watching and ignoring.\n\nWith that said, here's a summary of the current lints and their numbers:\n\n- 000: An error thrown by the parser, that is not handled by rules in this linter. Note that the parser will attempt to continue parsing, so it should not be fatal.\n- 001: Top level junk. Junk behaves like a comment, but is not marked with a `%`. Ignoring this is fine, and wil not affect your program (in all sane cases). This warning is largely here because biber throws a warning about junk in the log file (`\\jobname.blg`)\n- 002: The entry name cannot be found. I don't think this will ever throw, because the parser creates and empty node for the entry name regardless.\n- 004: Missing entry name. This is the one that will most likely throw.\n- 005: Unexpected entry name. Thrown when the entry name has not been declared in the list of valid entries for the style.\n- 006: Duplicate field. For when a given entry already has the field (done only by name, aliases are not supported for this)\n- 007: Unexpected field. When the entry has not been declared as supporting the field.\n- 011: Duplicate key. The key has been seen in an entry above, in the position `(line:column)`\n- 012: Empty key name. The key is empty, which throws an error when running biber\n- 013: Non-ASCII characters in key. While these characters may work if using XeTeX or similar, it may reduce compatibility with other engines. Relevant if you're using a shared bib file across multiple projects.\n- 014: \\@COMMENT commands can break with BiBTeX. This is added because the original spec, BiBTeX, does not support explicit comments. The closest it gets is reading the name of `@comment`, and immediately going back into \"looking for an entry\" mode. If you have an `@` inside one of these, it could cause problems if running with `BiBTeX` (which is admittedly very unlikely).\n- 019: Unhandled error in entry field. Similar to 000, but hey--- at least it knows it's inside an entry.\n- 020: Missing closing delimiter. For when the parser has detected an error, and it's most likely because you forgot to close something.\n- 021: Unbalanced { | Unbalanced }. Note there's no way to escape characters, so use a command like `\\textbackslash` or TeX sorcery if necessary.\n- 022: Unbalanced ). Parentheses can be used to deliminate a `@comment` command. Basically, they need to be balanced, and when the closing `)` is seen, any braces must also be balanced.\n- 034: Missing required fields. All of these have been indicated as required by the style config. Until better style rules parsing is implemented, you may want to use a config file to customise this. (Corresponds to `all` in config)\n- 035: Missing at least one field of. Similar to 034. (Corresponds to `some` in config)\n- 036: Missing one of. Similar to 034. (Corresponds to `one` in config)\n- 037: Too many of. Similar to 034. (Corresponds to `one` in config)\n- 038: Failed conditional. A prerequisite combination of fields was met, but the condition failed. Not currently possible to add / customise.\n- 042: Field name is missing. Maybe you added a comma or equals sign where you weren't supposed to?\n- 065: Invalid range format. The field has been marked as a range, and the value did not match expectations.\n- 067: Invalid date format. The field has been marked as a date, and the value is not what is expected. Would you believe this is the reason I wrote this entire linter?\n- 068: Invalid pattern match. The value was supposed to match the shown ([regex](https://www.marksanborn.net/howto/learning-regular-expressions-for-beginners-the-basics/)) pattern, but failed.\n- 071: Cannot find key. Unlikely to throw, as empty key is still \"found\" (see 012)\n- 082: Empty field value not allowed. The field has been marked as `nullok=false`, and the value has been detected as empty.\n- 098: Error when looking for node. The linter was looking for a node, but encountered a syntax error while it searched.\n- 099: Missing comma after key. This throws an error with biber, regardless of if there are no fields.\n- 997: Missing node. If the node is marked as an error by the parser, and it has 0 width.\n- 998: Error encountered. That's not supposed to be there...\n- 999: foo. When I forget to give a lint a number.\n","downloads":414,"stargazers_count":0},{"name":"linter-lein","version":"0.1.1","private":false,"description":"Atom linter plugin for Clojure by loading each file.","repository":{"type":"git","url":"https://github.com/saulshanabrook/linter-lein"},"keywords":["linter","lint","lein"],"bugs":{"url":"https://github.com/saulshanabrook/linter-lein/issues"},"homepage":"https://github.com/saulshanabrook/linter-lein#readme","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^4.3.2","atom-package-deps":"^3.0.8"},"devDependencies":{"standard":"^6.0.5","babel-eslint":"^4.1.5"},"standard":{"parser":"babel-eslint"},"package-deps":["linter","language-clojure"],"providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"readme":"# linter-lein\n\nThis package will lint your Clojure files in Atom using by attempting to \nload the file and printing compile time errors. This is what the `lein check`\ncommand does as well.\n\n## Installation\n\n### Leiningen\n\nBefore using this package you will need to install the\n[`lein-check-stdin`][https://github.com/saulshanabrook/lein-check-stdin] plugin\n(and obviously [Leiningen][])\n\n\n### Plugin installation\n\nThe [Linter][] and package will be installed for you to provide an interface\nto this package. If you are using an alternative debugging interface that\nsupports linter plugins simply disable [Linter][].\n\nTo install this package either search for it from within Atom's settings menu\nor run the following command.\n\n```ShellSession\napm install linter-lein\n```\n\n## Settings\n\nAll of `linter-lein`'s settings are available from within Atom's settings menu.\nIf you prefer to manually edit the configuration file the following settings\nare available:\n\n*   `leinExecutablePath`: Defaults to `lein`, allowing the `$PATH` to resolve the\n    correct location. If you need to override this specify the full path to\n    `lein`.\n\n[linter]: https://github.com/atom-community/linter \"Linter\"\n[Leiningen]: https://github.com/technomancy/leiningen \"Leiningen\"\n","downloads":879,"stargazers_count":3},{"name":"linter-lsl2","main":"./lib/linter-lsl2","version":"0.0.2","description":"A linter provider for LSL2, depends on language-lsl2.","keywords":["linter","lsl2","lsl"],"repository":"https://github.com/jomik/atom-linter-lsl2","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-package-deps":"^4.6.0","atom-linter":"^10.0.0"},"package-deps":["linter","language-lsl2"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"devDependencies":{"prettier":"^1.14.3"},"readme":"# linter-lsl2 package\n\nA short description of your package.\n\n![A screenshot of your package](https://f.cloud.github.com/assets/69169/2290250/c35d867a-a017-11e3-86be-cd7c5bf3ff9b.gif)\n","downloads":300,"stargazers_count":0},{"name":"linter-kibit","main":"./index.js","version":"0.1.2","description":"An Atom Linter package for kibit (Clojure, ClojureScript)","keywords":["linter","kibit","clojure","clojurescript"],"repository":"https://github.com/rgdelato/linter-kibit","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.6.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"package-deps":["linter","language-clojure"],"configSchema":{"leinExecutablePath":{"title":"Lein Path","description":"Path to the `lein` executable","type":"string","default":"lein"}},"readme":"# linter-kibit\n\nThis linter plugin for Linter provides an interface to [kibit](https://github.com/jonase/kibit). It will be used with files that have the \"Clojure\" syntax.\n\n## Installation\n\nBefore using this package you will need to have [Leiningen](https://leiningen.org/) installed and available from your `$PATH`.\n\nYou will also need to merge the following into your `$HOME/.lein/profiles.clj` file:\n```clojure\n{:user {:plugins [[lein-kibit \"0.1.3\"]]}}\n```\n","downloads":411,"stargazers_count":0},{"name":"linter-joker","main":"./index.js","version":"4.1.0","description":"An Atom Linter package for joker (Clojure, ClojureScript)","keywords":["linter","joker","clojure","clojurescript"],"repository":"https://github.com/rgdelato/linter-joker","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.6.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"package-deps":["linter","language-clojure"],"configSchema":{"jokerExecutablePath":{"title":"Joker path","description":"Path to the `joker` executable","type":"string","default":"joker"},"lintsOnChange":{"title":"Lints on change","description":"When disabled, only lints files on save","type":"boolean","default":"true"}},"readme":"# linter-joker package\n\nThis linter plugin for Linter provides an interface to [joker](https://github.com/candid82/joker). It will be used with files that have the \"Clojure\" syntax.\n\n## Installation\n\nBefore using this package you will need to have [joker](https://github.com/candid82/joker) installed and available from your `$PATH`. Joker version __v0.9.7__ or greater is required. You can download it [here](https://github.com/candid82/joker/releases) or install it via Homebrew with:\n\n```\nbrew install candid82/brew/joker\n```\n","downloads":3453,"stargazers_count":2},{"name":"linter-twig","main":"./lib/main.coffee","version":"0.4.2","description":"Atom linter for Twig templates","keywords":["lint","linter","twig","php","symfony"],"repository":"https://github.com/lexcast/linter-twig","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^9.0.1","atom-package-deps":"^4.5.0"},"package-deps":["linter:2.0.0"],"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"readme":"# Twig Linter\n\n[![apm install linter-twig](https://apm-badges.herokuapp.com/apm/linter-twig.svg)](https://atom.io/packages/linter-twig)\n\n## Requirements\n\nBefore installing this package, you need [asm89/twig-lint](https://github.com/asm89/twig-lint)\ninstalled and in your `$PATH`. Do the following:\n\n- Install PHP\n\n- Install Composer\n\n- Install [asm89/twig-lint](https://github.com/asm89/twig-lint)\n\n```bash\ncomposer global require \"asm89/twig-lint\" \"@dev\"\n```\n\n**IMPORTANT TO INSTALL THE DEV VERSION**\n\n## Install\n\n```bash\napm install linter-twig\n```\n","downloads":18509,"stargazers_count":31},{"name":"linter-tidy","main":"./lib/main.js","version":"2.4.0","description":"Linter plugin for HTML, using tidy","repository":{"type":"git","url":"https://github.com/AtomLinter/linter-tidy"},"keywords":["linter","lint","tidy","tidy-html5"],"configSchema":{"executablePath":{"default":"tidy","title":"Full path to the `tidy` executable","order":1,"type":"string"},"executableArguments":{"default":["-utf8"],"title":"Tidy Executable Arguments","description":"A comma-separated list of additional arguments to pass to the Tidy executable when invoked.<br/><br/>The arguments specified here will be appended to arguments required for this linter to work.","order":2,"type":"array","items":{"type":"string"}},"grammarScopes":{"default":["text.html.basic"],"title":"Grammar Scopes","description":"A list of grammar scopes to lint with Tidy.<br/><br/> By default, this package only lints HTML scopes known to work cleanly with Tidy. If you know of any HTML variants that Tidy works with without producing spurious errors, please [let us know](https://github.com/AtomLinter/linter-tidy/issues) so that we may improve the default list.<br/><br/> To find the grammar scopes used by a file, use the `Editor: Log Cursor Scope` command.","order":3,"type":"array","items":{"type":"string"}}},"license":"MIT","private":true,"engines":{"atom":">=1.4.0 <2.0.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"scripts":{"test":"apm test","lint":"eslint ."},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^5.0.0"},"devDependencies":{"eslint":"^4.6.0","eslint-config-airbnb-base":"^12.0.0","eslint-plugin-import":"^2.7.0","jasmine-fix":"^1.3.0"},"eslintConfig":{"extends":"airbnb-base","rules":{"global-require":"off","import/no-unresolved":["error",{"ignore":["atom"]}]},"env":{"node":true},"globals":{"atom":true}},"package-deps":["linter:2.0.0"],"readme":"# linter-tidy\n\nThis package will lint your `.html` opened files in Atom through [tidy-html5][].\n\n## Installation\n\n*   Install [tidy-html5][]\n*   `$ apm install linter-tidy`\n\n## Settings\n\nYou can configure linter-tidy by editing ~/.atom/config.cson (choose Open Your\nConfig in Atom menu):\n\n```coffeescript\n'linter-tidy':\n  'tidyExecutablePath': null # tidy path. run 'which tidy' to find the path\n  'grammarScopes': [\n    'text.html.basic'\n  ] # A list of grammar scopes to lint with Tidy.\n```\n\n[tidy-html5]: http://www.html-tidy.org\n","downloads":146199,"stargazers_count":259},{"name":"linter-flow-plus","version":"3.1.0","description":"A better and maintained linter for flow types","activationCommands":[],"main":"./build/index.js","scripts":{"build":"babel src --out-dir build"},"repository":{"type":"git","url":"https://github.com/nmn/linter-flow-plus"},"keywords":["linter","atom"],"author":"Naman Goel","license":"MIT","engines":{"atom":">0.50.0"},"bugs":{"url":"https://github.com/nmn/linter-flow-plus/issues"},"homepage":"https://github.com/nmn/linter-flow-plus","providedServices":{"linter":{"versions":{"1.0.0":"provideLinter"}}},"devDependencies":{"babel":"^5.8.23"},"readme":"# linter-flow-plus\n\nA better linter plugin for Facebook's [Flow JS typechecker](http://flowtype.org/). It works on the fly.\n\n![linter-demo](https://naman.s3.amazonaws.com/linter-flow-plus/linter-flow-plus.gif)\n\n### How to use it\n\n1. Install [flow](http://flowtype.org/)\n2. Confirm the `linter` package is installed and enabled for Atom.\n3. Create a .flowconfig file at the root of your repo. (You can use the `flow init` command to do so)\n4. Install the linter-flow-plus package using the installer screen or the `apm` cli.\n5. At the `/* @flow */` to any JS file to enable on-the-fly flow linting when you code!\n\nPlease see the official flow website for details on how to install flow. My recommendation is to clone down the repo and build it yourself for the best ES6 support possible.\n\n### Why not X?\n\n1. A similarly named package: linter-flow is now a mirror. The development happens for both packages in parallel.\n2. IDE-flow works relatively well, but it doesn't lint on-the-fly and doesn't integrate with the linter package.\n3. Nuclide has too many problems for now to be reliable. It also involves installing a large number of other packages.\n\nlinter-flow-plus is made to be a simple package that does one thing well.\n\nPlease Note: IDE-flow and Nuclide provide other features such as autocomplete, type definitions on hover etc. Please continue to use those services for those features. (possibly in addition to linter-flow-plus)\n\n### features\n\nlinter-flow-plus has on-the-fly linting using flow types. It also provides clean errors with traces.\n(Only Nuclide's trace support is based on the same code, and no other implementation exists currently)\n\n### Limitations\n\nThis linter currently does not support Hack. Though the linter just uses the flow-cli and hack support should be trivial to add, I'm not a Hack/PHP developer and I can't test that it actually works. I would welcome if someone was to add support for Hack to this package and test it.\n\nThis linter only works within files with the `/* @flow */` comment. Linter errors from other files are currently ignored and settings to lint all files without the comment are currently ignored. I would love some feedback to fix this issue.\n\n### Known issues\n\nIf you open a project without `.flowconfig` file with this linter enabled, you will get a dumb error on line 1, saying `Error Linting`.\n\n### Contribution and Feedback\n\nThis project started off as I was frustrated with IDE-flow and Nuclide. I hunted around in the flow-cli, made a PR to add documentation about it to their website, and create a few issues on Nuclide, and eventually, after seeing how straightforward writing a linter was, creating this linter over the night.\n\nSince then, I depend on this linter on a daily basis for all my Javascript development, and so I maintain this project. There are a few rough edges and I would love some help to fix them.\n\nSo please, make contributions and create github issues. In the issues, please complain about problems and missing features.\n","downloads":4266,"stargazers_count":14},{"name":"linter-ui-plus","main":"./lib/index.js","version":"0.3.2","description":"An experiment into an enhanced UI for the Atom Linter package.","keywords":["linter-ui"],"repository":"https://github.com/mehcode/linter-ui-plus","license":"MIT","engines":{"atom":">=1.17.0 <2.0.0"},"atomTranspilers":[{"glob":"{lib,test}/**/*.js","transpiler":"atom-babel6-transpiler","options":{"cacheKeyFiles":["package.json",".babelrc"]}}],"scripts":{"test":"(apm test) && (flow check) && (eslint . )","flow":"flow","eslint":"eslint ."},"dependencies":{"atom-babel6-transpiler":"^1.1.1","babel-generator":"^6.21.0","babel-plugin-chai-assert-async":"^0.1.0","babel-plugin-transform-async-to-generator":"^6.16.0","babel-plugin-transform-class-properties":"^6.19.0","babel-plugin-transform-decorators-legacy":"^1.3.4","babel-plugin-transform-es2015-destructuring":"^6.19.0","babel-plugin-transform-es2015-modules-commonjs":"^6.18.0","babel-plugin-transform-es2015-parameters":"^6.21.0","babel-plugin-transform-object-rest-spread":"^6.20.2","babel-preset-react":"^6.24.1","classnames":"^2.2.5","etch":"^0.12.5","import-lazy":"^3.0.0","marked":"^0.3.6"},"devDependencies":{"babel-eslint":"^7.2.3","eslint":"^4.2.0","eslint-config-standard":"^10.2.1","eslint-plugin-flowtype":"^2.34.1","eslint-plugin-import":"^2.7.0","eslint-plugin-node":"^5.1.0","eslint-plugin-promise":"^3.5.0","eslint-plugin-react":"^7.1.0","eslint-plugin-standard":"^3.0.1"},"providedServices":{"linter-ui":{"versions":{"1.0.0":"provideUI"}}},"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}}},"package-deps":["linter"],"configSchema":{"showInStatusBar":{"description":"Show a summary in the current project.","type":"boolean","default":true,"order":1},"statusBarPosition":{"title":"Position in Status Bar","description":"Show the summary (if enabled) on the left or right of the status bar.","type":"string","enum":["Left","Right"],"default":"Left","order":2}},"readme":"# Linter-UI-Plus\n> An experiment into an enhanced UI for the Atom Linter package.\n\n#### This is an _alpha_ release. Not all features are available (yet) that are in `linter-ui-default` and those that are present are subject to change. Please open issues with any feedback you have.\n\n## Panel\n\n![](https://user-images.githubusercontent.com/753919/28002478-686f307e-64ea-11e7-83c7-b41a2ef130c8.png)\n \n - Use `linter-ui-plus:toggle-panel` (`alt-shift-d`) will toggle the panel\n - Single click selects message on panel (and opens file in a preview tab) and leaves focus in the panel\n - Double click or `linter-ui-plus:open-selected-entry` (`enter`) on a selected message will focus the file \n - Use `core:move-up` (`up`) and `core:move-down` (`down`) to move to the next or previous message while in the panel\n \n## Editor\n\n![](https://user-images.githubusercontent.com/753919/28002548-05159f94-64eb-11e7-97b4-9ce23d8f0cda.png)\n\n - An extra gutter is added that will show an error, warning, or info glyph\n - The source of the message will be highlighted in the editor with a red (error), yellow (warning), or blue (info) wavy line\n","downloads":4232,"stargazers_count":6},{"name":"linter-yaml","main":"./lib/main.js","version":"1.1.0","description":"YAML provider for Linter","repository":"https://ferhaty@github.com/ferhaty/linter-yaml","license":"MIT","keywords":["lint","linter","yaml","yamllint","yaml-lint"],"bugs":{"url":"https://github.com/ferhaty/linter-yaml/issues"},"engines":{"atom":">0.95.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"readmeFilename":"README.md","dependencies":{"atom-linter":"^10.0.0"},"devDependencies":{"eslint":"latest","babel-eslint":"latest"},"eslintConfig":{"parser":"babel-eslint","rules":{"strict":0},"env":{"es6":true,"browser":true,"node":true},"globals":{"atom":true}},"readme":"### Linter-YAML-Linting\n\n`Linter-YAML-Linting` aims to provide functional and robust `YAML` linting functionality within Atom.\n\n### Installation\nThe `Linter` Atom package is required and the `yamllint` executable.\n\n### Usage\n- This linter must be used on YAML files.\n- To quickly and easily access issues in other files, you will need to change the settings inside `Linter-UI-Default`. For `Panel Represents` and/or `Statusbar Represents`, you will need to change their options to `Entire Project`. This will allow you to use either display to quickly access issues in other files by clicking on the displayed information.\n","downloads":1656,"stargazers_count":1},{"name":"linter-kondo","main":"./index.js","version":"1.1.1","description":"An Atom Linter package for clj-kondo (Clojure, ClojureScript)","keywords":["linter","kondo","clj-kondo","clojure","clojurescript"],"repository":"https://github.com/gerred/linter-kondo","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{"atom-linter":"^10.0.0","atom-package-deps":"^4.6.0"},"providedServices":{"linter":{"versions":{"2.0.0":"provideLinter"}}},"package-deps":["linter","language-clojure"],"configSchema":{"kondoExecutablePath":{"title":"clj-kondo path","description":"Path to the `cljkondo` executable","type":"string","default":"clj-kondo"},"lintsOnChange":{"title":"Lints on change","description":"When disabled, only lints files on save","type":"boolean","default":true}},"readme":"# linter-kondo plugin\n\nThis linter plugin for Linter provides an interface to [clj-kondo](https://github.com/borkdude/clj-kondo). It will be used with files that have the \"Clojure\" syntax. Heavily adapted from the [linter-joker](https://github.com/rgdelato/linter-joker) plugin by Ryan De La Torre.\n\n## Installation\n\nBefore using this package you will need to have [clj-kondo](https://github.com/borkdude/clj-kondo) installed and available from your `$PATH`. This package is tested on the `2018.08.21-alpha` and later versions of clj-kondo.\n\n```\nbrew install borkdude/brew/clj-kondo\n```\n","downloads":47,"stargazers_count":1},{"name":"linter-spell-rst","main":"./lib/main","version":"0.4.0","description":"restructuredText spell checking using linter-spell (beta)","author":"Alexandre Voiney <pro@alexandre.voiney.fr>","keywords":["rst","reStructuredText","linter","spell-check","linter-spell"],"activationHooks":["language-restructuredtext:grammar-used"],"standard":{"parser":"babel-eslint","globals":["atom","latex","afterEach","beforeEach","describe","expect","it","jasmine","runs","spyOn","waitsFor","waitsForPromise"]},"repository":"https://github.com/avoiney/linter-spell-rst","license":"MIT","engines":{"atom":">=1.0.0"},"dependencies":{"lodash":"^4.17.4","atom-package-deps":"^4.4.1","linter-spell-word-list":"^0.5.0"},"devDependecies":{"semver":"^5.3.0"},"package-deps":["linter-spell","language-reStructuredText"],"providedServices":{"linter-spell-grammar":{"versions":{"1.0.0":"provideGrammar"}},"linter-spell-dictionary":{"versions":{"1.0.0":"provideDictionary"}}},"configSchema":{"words":{"title":"restructuredText Words","description":"restructuredText specific word list. Precede word with '!' to make word case sensitive.","type":"array","default":[],"order":1}},"readme":"# linter-spell-rst\n\nProvider for Atom [linter-spell](https://atom.io/packages/linter-spell) package\nto enable restructuredText spell checking.\n\n## Installing\n\nUse the Atom Package Manager and search for \"linter-spell-rst\", or\nrun `apm install linter-spell-rst` from command line interface.\n\n## Prerequisites\n\n* [linter-spell](https://atom.io/packages/linter-spell)\n* [language-restructuredText](https://atom.io/packages/language-restructuredText)\n","downloads":804,"stargazers_count":1},{"name":"linter-spell-hcl","main":"./lib/main","version":"0.2.1","description":"HCL spell checking using linter-spell","keywords":["hcl","linter","linter-spell","spell-check"],"repository":"https://github.com/veger/linter-spell-hcl","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"bugs":{"url":"https://github.com/veger/linter-spell-hcl/issues"},"dependencies":{"atom-package-deps":"^4.0.0","linter-spell-word-list":"^0.5.0"},"package-deps":["linter-spell","language-hcl"],"activationHooks":["language-hcl:grammar-used"],"configSchema":{"checkComments":{"description":"Enable spell check in HCL comments.","type":"boolean","default":true,"order":1},"checkStrings":{"description":"Enable spell check in HCL strings.","type":"boolean","default":true,"order":2}},"providedServices":{"linter-spell-grammar":{"versions":{"1.0.0":"provideGrammar"}},"linter-spell-dictionary":{"versions":{"1.0.0":"provideDictionary"}}},"readme":"# linter-spell-hcl\n\n[![Travis&#x2011;CI Build Status](http://img.shields.io/travis/veger/linter-spell-hcl/master.svg?label=Linux/OSX%20build)](https://travis-ci.org/veger/linter-spell-hcl)\n[![AppVeyor Build Status](http://img.shields.io/appveyor/ci/veger/linter-spell-hcl/master.svg?label=Windows%20build)](http://ci.appveyor.com/project/veger/linter-spell-hcl)\n\nProvider for Atom [linter-spell](https://atom.io/packages/linter-spell) package to enable spell checking for HCL files.\n\n## Installing\n\nUse the Atom Package Manager and search for \"linter-spell-hcl\", or run `apm install linter-spell-hcl` from command line interface.\n\n## Prerequisites\n\n* [linter-spell](https://atom.io/packages/linter-spell)\n* [language-hcl](https://atom.io/packages/language-hcl)\n","downloads":492,"stargazers_count":0}]
