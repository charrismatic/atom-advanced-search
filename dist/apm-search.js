#!/usr/bin/env node
const help=()=>{console.log([["\n Atom Advanced Search","search, sort, and filtering tool for Atom apm packages"].join(" - "),["\n [USAGE]","apm-search [options] <name>"].join("\n   "),["\n [SELECT OPTIONS]",["  --select-packages","Get packages (default)"].join("\t"),["  --select-themes","Get themes"].join("\t"),["  --select-featured","Get featured packages/themes (ignores name argument)"].join("\t")].join("\n   "),["\n [SORT OPTIONS]",["  --sort-stars","Sort by stars (default)"].join("\t"),["  --sort-downloads","Sort by downloads"].join("\t")].join("\n   "),["\n [GENRAL OPTIONS]",["  --help       ","Show this help menu"].join("\t"),["  --verbose    ","Show more information"].join("\t"),["  --nocolor    ","Disable color printing on output"].join("\t"),["  --version    ","Output package version number"].join("\t")].join("\n   "),[""]].join("\n"))},__DEBUG__=!!process.env.NODE_DEBUG_LOGGING,debug=(...e)=>{var r=require("util");__DEBUG__&&function(e){console.log(r.inspect(e,!0,3,!0))}(...e)},TimerLabels={},Timers={},debugTime=(e,r)=>{if(!!process.env.NODE_DEBUG_LOGGING){const t=require("perf_hooks");switch(r){case"start":TimerLabels[e]=t.performance,console.time(e),console.timeLog(e);break;case"mark":console.timeLog(e);break;case"end":console.timeLog(e),console.timeEnd(e);let r=TimerLabels[e].nodeTiming;Timers[e]={name:r.name,duration:[r.duration.toString().split(".")[0],r.duration.toString().split(".")[1].slice(0,10)].join("."),environment:[r.environment.toString().split(".")[0],r.environment.toString().split(".")[1].slice(0,10)].join("."),bootstrapComplete:[r.bootstrapComplete.toString().split(".")[0],r.bootstrapComplete.toString().split(".")[1].slice(0,10)].join("."),timeOrigin:[TimerLabels[e].timeOrigin.toString().split(".")[0],TimerLabels[e].timeOrigin.toString().split(".")[1].slice(0,10)].join(".")},console.log([e,"END","\t"].join(" "),JSON.stringify(Timers[e])),TimerLabels[e]=null;break;default:console.timeLog(e)}}},name="atom-advanced-search",version="1.0.4",pkgver=()=>{console.log([name,version].join(" v"))},defaults={verbose:!1,file:!1,sort:"stars",select:"packages",color:!0},parse_options=e=>{var r=process.env.PKG_OPTIONS||"{}";return e=Object.assign({},defaults,JSON.parse(r)),debug("Options set in environment variable:",process.env.PKG_OPTIONS,"Options: ",e),e},parse_arguments=e=>{debugTime("[parse_arguments]","start"),debug("[parse_arguments] args",typeof e,{args:e});var r={};if(!e||0===e.length)return!1;if(!Array.isArray(e))return"object"==typeof e&&Object.entries(e).length>0&&parse_options(e),!1;var t=e.shift();do{switch(debug("[parse_arguments] start loop",t),t){case __filename:debug("found this file, skipping",t),debug("next arg",t);break;case"--help":help(),debug("[parse_arguments] set help",t),debug("[parse_arguments] print help exit"),debugTime("[parse_arguments]","end"),process.exit(0);break;case"--version":debugTime("[parse_arguments]","end"),debug("[parse_arguments] print version exit"),console.log([name,version].join(" v")),debug("[parse_arguments] set version",t),process.exit(0);break;case"--verbose":r.verbose=!0,debug("[parse_arguments] set verbose",t);break;case"--sort-stars":r.sort="stars",debug("[parse_arguments] set stars",t);break;case"--nocolor":process.env.NOCOLOR=!0,r.color=!1,debug("[parse_arguments] set color",t);break;case"--sort-downloads":r.sort="downloads",debug("[parse_arguments] set downloads",t);break;case"--select-packages":r.select="packages",debug("[parse_arguments] set selected stars",t);break;case"--select-themes":r.select="themes",debug("[parse_arguments] set selected themes",t);break;case"--select-featured":r.select="featured",debug("[parse_arguments] set selected featured",t);break;case"--file":t=e.shift()||!1,r.file=t,debug("[parse_arguments] set file",t);break;default:if(t.match(/^--/)){var s=[];s.push("unknown")}else void 0===t?(debug("[parse_arguments] is undefined",t),s.push("undefined")):t.length>0?(r.query=t,s="query",debug("[parse_arguments] is query",t)):(debug("[parse_arguments] didnt match passing..",s,t),console.log(["Notice: Argument",t,"is unknown"].join(" ")));debug("----end loop----\n")}t=e.shift()}while(t);return debug("stopping",e,t),debugTime("[parse_arguments]","end"),debug("[parse_arguments] end loop",JSON.stringify({options:r})),r},get_packages=(e,r)=>{if(debugTime("[get_packages]","start"),debug("[get_packages] args",{query:e},{options:r}),!e&&!r.featured)return!1;let t=["apm","featured"===r.select?"featured":"search","--json","themes"===r.select?"--themes":null,"featured"===r.select?null:e].join(" ");r.verbose&&console.log(t),debug("[get_packages] execSync"),debugTime("[get_packages]","mark"),console.log(["Searching apm (",r.select,") for:",e].join(" "));const{execSync:s}=require("child_process");try{const e=s(t.toString()),r=Buffer.from(e).toString("UTF-8"),n=JSON.parse(r.trim());return debug("[get_packages] return"),debugTime("[get_packages]","end"),n}catch(e){return debug("[get_packages] error"),debugTime("[get_packages]","end"),console.error("exec error: ",e),e}},color=e=>{var r=require("tty"),t={bold:["1m","22m"],dim:["2m","22m"],italic:["3m","23m"],underline:["4m","24m"],inverse:["7m","27m"],black:["30m","39m"],red:["31m","39m"],green:["32m","39m"],yellow:["33m","39m"],blue:["34m","39m"],magenta:["35m","39m"],cyan:["36m","39m"],white:["37m","39m"],default:["39m","39m"],grey:["90m","39m"],bgBlack:["40m","49m"],bgRed:["41m","49m"],bgGreen:["42m","49m"],bgYellow:["43m","49m"],bgBlue:["44m","49m"],bgMagenta:["45m","49m"],bgCyan:["46m","49m"],bgWhite:["47m","49m"],bgDefault:["49m","49m"]};const s=e=>["[",e].join("");return process.env.COLORTERM||(console.log("COLORTERM environment variable not set, continuing to display with color."),console.log("Set NOCOLOR in the environment or --nocolor in the commandline if there are issues")),e=!process.env.NOCOLOR&&r.isatty(1)&&r.isatty(2),Object.keys(t).forEach((function(r){Object.defineProperty(String.prototype,r,{get:function(){return e?((e,r)=>[s(e[1]),s(e[0]),r,s(e[1])].join(""))(t[r],this):this},enumerable:!1})})),t},render=(e,r)=>{if(debugTime("[render]","start"),debug("[render] args",{packages:e},{options:r}),!e)return console.log("No packages listed"),debug("[render] exit no packages"),debugTime("[render]","end"),!1;color(r.color);var t,s,n,a,o,i=process.stdout.columns||80,g=0,d=0,m=0,l=0;const c=e=>{var r=e.stargazers_count,t=e.downloads,s=e.name,n="0.0.0.0";n=e.metadata?e.metadata.version:e.version,parseInt(r)>g&&(g=parseInt(r)),parseInt(t)>d&&(d=parseInt(t)),s.length>m&&(m=s.length);var a=n?n.length:0;a>l&&(l=a)},u=(e,r)=>(c(e),c(r),parseInt(e.stargazers_count)<parseInt(r.stargazers_count)?1:-1),p=(e,r)=>(c(e),c(r),parseInt(e.downloads)<parseInt(r.downloads)?1:-1),b=["Stars","Downloads","Package","Description"].join(" "),f="-".padStart(b.length,"-"),_=e=>{if(!e.name)return!1;e.metadata&&(e.description=e.metadata.description,e.version=e.metadata.version);const n=e.name,o=(e.downloads||0).toString().padStart(s," "),g=(e.stargazers_count||0).toString().padStart(t," "),d=(e=>["(",e,")"].join(""))(e.version||"0.0.0"),m=(e.description||"undefined").slice(0,i-a-n.length);return["","downloads"===r.sort?g.default:g.yellow.bold,"downloads"===r.sort?o.yellow.bold:o.default,n.cyan.bold,d.dim.italic,m.white].join(" ")};return"downloads"===r.sort?(debug("[render] sort_downloads"),debugTime("[render]","mark"),o=e.sort(p)):(debug("[render] sort_stars"),debugTime("[render]","mark"),o=e.sort(u)),t=g.toString().length,s=d.toString().length,a=8+t+s+(n=l),debug("[render] print table"),debugTime("[render]","mark"),debug(["Longest",i].join(": "),["pad_stars",t].join(": "),["pad_downs",s].join(": "),["pad_version",n].join(": ")),(e=>{var r=[];for(var t of(r.push(b.bold),r.push(f),e))r.push(_(t));console.log(r.join("\n"))})(o),debug("[render] done"),debugTime("[render]","end"),!0},encoding="utf-8",process_file=async e=>{const{fs:r}=require("fs");var t;if(console.log("filename",e),!e)return!1;let s=process.env.INIT_CWD||".";console.log("base_dir",s);var n=[s,e].join("/");return console.log("filepath",n),await r.readFile(n,(e,r)=>{if(e)return console.log("Error reading from file",e,r),!1;t=Buffer.from(r).toString("utf-8")}),console.log("fildata",t),JSON.parse(t)},process_stream=e=>{debugTime("[process_stream]","start"),debug("[process_stream] start");const r=Buffer.from(e).toString("utf-8");debug("received data stream:",typeof e,e.length);var t=parse_options(),s=process.argv;s.shift(),s[0]===__filename&&s.shift();var n=parse_arguments(s);debug("runtime_options",n),t=Object.assign({},t,n);try{var a=JSON.parse(r.trim())}catch(e){console.log("Error processing input data",e)}finally{debug("[process_stream] exit to render stream"),debugTime("[process_stream]","end"),render(a,t)}},_main=()=>{var e,r=process.argv;r.shift(),r[0]===__filename&&r.shift();var t=parse_options(),s=parse_arguments(r);(t=Object.assign({},t,s)).verbose&&console.log("options",t),"featured"===t.select?e="":(e=t.query)||(help(),debugTime("[main]","end"),process.exit(0)),debug({options:t});var n=[];return t.file?(debugTime("[main]","mark"),n=process_file(t.file),debugTime("[main]","mark")):(debugTime("[main]","mark"),n=get_packages(e,t),debugTime("[main]","mark")),render(n,t)},main=()=>{debugTime("[main]","start");let e=_main();debugTime("[main]","end"),debug("[main] result",e),process.exit(0)};if(debug("START"),debugTime("[Application]","start"),process.stdin.isTTY)debug("[Application] init main (isTTY)"),debugTime("[Application]","mark"),main();else{var data="";process.stdin.setEncoding("utf-8").on("readable",(function(){var e;for(debug("[Application] read stream START (noTTY)"),debugTime("[Application]","mark");e=process.stdin.read();)data+=e;debug("[Application] read stream END (noTTY)"),debugTime("[Application]","mark")})).on("end",(function(){debug("[Application] init process_stream (noTTY)"),debugTime("[Application]","mark"),data=data.replace(/\n$/,""),process_stream(data)}))}
